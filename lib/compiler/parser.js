module.exports = (function() {
    /*
     * Generated by PEG.js 0.8.0.
     *
     * http://pegjs.majda.cz/
     */
  
    function peg$subclass(child, parent) {
      function ctor() { this.constructor = child; }
      ctor.prototype = parent.prototype;
      child.prototype = new ctor();
    }
  
    function SyntaxError(message, expected, found, offset, line, column) {
      this.message  = message;
      this.expected = expected;
      this.found    = found;
      this.offset   = offset;
      this.line     = line;
      this.column   = column;
  
      this.name     = "SyntaxError";
    }
  
    peg$subclass(SyntaxError, Error);
  
    function parse(input) {
      var options = arguments.length > 1 ? arguments[1] : {},
  
          peg$FAILED = {},
  
          peg$startRuleFunctions = { start: peg$parsestart },
          peg$startRuleFunction  = peg$parsestart,
  
          peg$c0 = peg$FAILED,
          peg$c1 = function() {  shaderType = "vs"; return true; },
          peg$c2 = void 0,
          peg$c3 = function(root) {
                return root;
              },
          peg$c4 = function() {  shaderType = "fs"; return true; },
          peg$c5 = /^[\n]/,
          peg$c6 = { type: "class", value: "[\\n]", description: "[\\n]" },
          peg$c7 = function() {
              return "\n";
            },
          peg$c8 = { type: "any", description: "any character" },
          peg$c9 = { type: "other", description: "whitespace" },
          peg$c10 = [],
          peg$c11 = /^[\\\n]/,
          peg$c12 = { type: "class", value: "[\\\\\\n]", description: "[\\\\\\n]" },
          peg$c13 = /^[\r\t\f\x0B ]/,
          peg$c14 = { type: "class", value: "[\\r\\t\\f\\x0B ]", description: "[\\r\\t\\f\\x0B ]" },
          peg$c15 = "/*",
          peg$c16 = { type: "literal", value: "/*", description: "\"/*\"" },
          peg$c17 = "*/",
          peg$c18 = { type: "literal", value: "*/", description: "\"*/\"" },
          peg$c19 = "//",
          peg$c20 = { type: "literal", value: "//", description: "\"//\"" },
          peg$c21 = /^[^\n]/,
          peg$c22 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
          peg$c23 = { type: "other", description: "comment" },
          peg$c24 = null,
          peg$c25 = ";",
          peg$c26 = { type: "literal", value: ";", description: "\";\"" },
          peg$c27 = ",",
          peg$c28 = { type: "literal", value: ",", description: "\",\"" },
          peg$c29 = "[",
          peg$c30 = { type: "literal", value: "[", description: "\"[\"" },
          peg$c31 = "]",
          peg$c32 = { type: "literal", value: "]", description: "\"]\"" },
          peg$c33 = "=",
          peg$c34 = { type: "literal", value: "=", description: "\"=\"" },
          peg$c35 = "(",
          peg$c36 = { type: "literal", value: "(", description: "\"(\"" },
          peg$c37 = ")",
          peg$c38 = { type: "literal", value: ")", description: "\")\"" },
          peg$c39 = "{",
          peg$c40 = { type: "literal", value: "{", description: "\"{\"" },
          peg$c41 = "}",
          peg$c42 = { type: "literal", value: "}", description: "\"}\"" },
          peg$c43 = function(statements) {
                // Skip blank statements.  These were either whitespace or
                var result = new node({
                  type: "root",
                  statements: []
                });
                for (var i = 0; i < statements.length; i++) {
                  if (statements[i]) {
                    result.statements = result.statements.concat(statements[i]);
                  }
                }
                return result;
              },
          peg$c44 = function(statement) { return statement; },
          peg$c45 = function() { return ""; },
          peg$c46 = "#",
          peg$c47 = { type: "literal", value: "#", description: "\"#\"" },
          peg$c48 = "undef",
          peg$c49 = { type: "literal", value: "undef", description: "\"undef\"" },
          peg$c50 = "pragma",
          peg$c51 = { type: "literal", value: "pragma", description: "\"pragma\"" },
          peg$c52 = "version",
          peg$c53 = { type: "literal", value: "version", description: "\"version\"" },
          peg$c54 = "error",
          peg$c55 = { type: "literal", value: "error", description: "\"error\"" },
          peg$c56 = "extension",
          peg$c57 = { type: "literal", value: "extension", description: "\"extension\"" },
          peg$c58 = "line",
          peg$c59 = { type: "literal", value: "line", description: "\"line\"" },
          peg$c60 = function(defname) {return defname.join("")},
          peg$c61 = function(directive, value) {
              return new node({
                type: "preprocessor",
                directive: "#" + directive,
                value: value
              });
            },
          peg$c62 = /^[A-Za-z_]/,
          peg$c63 = { type: "class", value: "[A-Za-z_]", description: "[A-Za-z_]" },
          peg$c64 = /^[A-Za-z_0-9]/,
          peg$c65 = { type: "class", value: "[A-Za-z_0-9]", description: "[A-Za-z_0-9]" },
          peg$c66 = function(head, tail) {
               return new node({
                 type: "identifier",
                 name: head + tail.join("")
               });
            },
          peg$c67 = function(head, tail) {
              if (!head) {
                return [];
              }
              return [ head ].concat(tail.map(function(item) { return item[1]; }));
            },
          peg$c68 = /^[^()]/,
          peg$c69 = { type: "class", value: "[^()]", description: "[^()]" },
          peg$c70 = function(head, paren, tail) {
              return head.join("") + paren + tail.join("");
            },
          peg$c71 = function(value) {
              return "(" + value + ")";
            },
          peg$c72 = /^[^,)]/,
          peg$c73 = { type: "class", value: "[^,)]", description: "[^,)]" },
          peg$c74 = function(value) {
              return value.join("");
            },
          peg$c75 = function(head, tail) {
              return [head].concat(tail.map(function(item) { return item[1]; }));
            },
          peg$c76 = function(macro_name, parameters) {
                var result = new node({
                  type: "macro_call",
                  macro_name: macro_name,
                  parameters: parameters
                });
                if (!parameters) {
                  result.parameters = [];
                }
                return result;
              },
          peg$c77 = function(head, tail) {
              return {
                macro_call: head,
                rest_of_line: tail.join('')
              }
            },
          peg$c78 = "define",
          peg$c79 = { type: "literal", value: "define", description: "\"define\"" },
          peg$c80 = /^[ \t]/,
          peg$c81 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
          peg$c82 = function(identifier, parameters, token_string) {
              return new node({
                   type: "preprocessor",
                   directive: "#define",
                   identifier: identifier.name,
                   token_string: token_string,
                   parameters: parameters || null
                 });
               },
          peg$c83 = "ifdef",
          peg$c84 = { type: "literal", value: "ifdef", description: "\"ifdef\"" },
          peg$c85 = "ifndef",
          peg$c86 = { type: "literal", value: "ifndef", description: "\"ifndef\"" },
          peg$c87 = "if",
          peg$c88 = { type: "literal", value: "if", description: "\"if\"" },
          peg$c89 = function(directive, value) {
                 return new node({
                   type: "preprocessor",
                   directive: "#" + directive,
                   value: value
                 });
               },
          peg$c90 = "elif",
          peg$c91 = { type: "literal", value: "elif", description: "\"elif\"" },
          peg$c92 = function(value) {
                return new node({
                  type: "preprocessor",
                  directive: "#elif",
                  value: value
                });
              },
          peg$c93 = "else",
          peg$c94 = { type: "literal", value: "else", description: "\"else\"" },
          peg$c95 = function() {
              return new node({
                type: "preprocessor",
                directive: "#else"
              });
            },
          peg$c96 = "endif",
          peg$c97 = { type: "literal", value: "endif", description: "\"endif\"" },
          peg$c98 = function(if_directive, elif_directive, else_directive) {
                return preprocessor_branch(if_directive, elif_directive, else_directive);
              },
          peg$c99 = function(prototype, body) {
                result = new node({
                  type: "function_declaration",
                  name: prototype.name,
                  returnType: prototype.returnType,
                  parameters: prototype.parameters,
                  body: body
                });
                return result;
            },
          peg$c100 = function(statements) {
                result = new node({
                  type: "scope",
                  statements: []
                });
                if (statements && statements.statements) {
                  result.statements = statements.statements;
                }
                return result;
              },
          peg$c101 = function(list) {return {statements: list};},
          peg$c102 = function(statement) {
              return statement;
            },
          peg$c103 = function(condition, if_body, else_body) {
                 result = new node({
                   type:"if_statement",
                   condition:condition,
                   body:if_body
                 });
                 if (else_body) {
                   result.elseBody = else_body[2];
                 }
                 return result;
               },
          peg$c104 = "for",
          peg$c105 = { type: "literal", value: "for", description: "\"for\"" },
          peg$c106 = function(initializer, condition, increment, body) {
                  return new node({
                    type:"for_statement",
                    initializer:initializer,
                    condition:condition,
                    increment:increment,
                    body:body
                  });
                },
          peg$c107 = "while",
          peg$c108 = { type: "literal", value: "while", description: "\"while\"" },
          peg$c109 = function(condition) {
                 return {
                   condition:condition
                 };
               },
          peg$c110 = function(w, body) {
                return new node({
                  type: "while_statement",
                  condition: w.condition,
                  body: body
                });
              },
          peg$c111 = "do",
          peg$c112 = { type: "literal", value: "do", description: "\"do\"" },
          peg$c113 = function(body, w) {
                 return new node({
                   type: "do_statement",
                   condition: w.condition,
                   body: body
                 });
               },
          peg$c114 = "return",
          peg$c115 = { type: "literal", value: "return", description: "\"return\"" },
          peg$c116 = function(expression) {
                return new node({
                  type: "return",
                  value: expression
                });
              },
          peg$c117 = "continue",
          peg$c118 = { type: "literal", value: "continue", description: "\"continue\"" },
          peg$c119 = "break",
          peg$c120 = { type: "literal", value: "break", description: "\"break\"" },
          peg$c121 = function() { return shaderType == "fs" },
          peg$c122 = "discard",
          peg$c123 = { type: "literal", value: "discard", description: "\"discard\"" },
          peg$c124 = function() {return "discard";},
          peg$c125 = function(type) {
                      return new node({
                        type:type[0]
                      });
                    },
          peg$c126 = function(e) {
                return new node({
                  type: "expression",
                  expression: e
                });
            },
          peg$c127 = { type: "other", description: "declaration" },
          peg$c128 = function(function_prototype) {
                return function_prototype;
              },
          peg$c129 = function(type, declarators) {
                return new node({
                  type: "declarator",
                  typeAttribute: type,
                  declarators: declarators
                });
              },
          peg$c130 = function() { return shaderType == "vs"; },
          peg$c131 = "invariant",
          peg$c132 = { type: "literal", value: "invariant", description: "\"invariant\"" },
          peg$c133 = function(head, tail) {
                  var items = [ head ].concat(tail.map(function(item) {
                    return item[1]; }));
                  return new node({
                    type: "invariant",
                    identifiers: items
                  });
                },
          peg$c134 = "precision",
          peg$c135 = { type: "literal", value: "precision", description: "\"precision\"" },
          peg$c136 = function(precission, type) {
                return new node({
                  type:"precision",
                  precision: precission,
                  typeName: type
                });
              },
          peg$c137 = function(type, declarators) {
              return new node({
                type: "declarator",
                typeAttribute: type,
                declarators: declarators
              });
            },
          peg$c138 = "void",
          peg$c139 = { type: "literal", value: "void", description: "\"void\"" },
          peg$c140 = function(head, tail) {
                return [ head ].concat(tail.map(function(item) { return item[1]; }));
              },
          peg$c141 = function(type, identifier, parameters) {
                result = new node({
                  type:"function_prototype",
                  name: identifier.name,
                  returnType: type,
                  parameters: parameters
                });
                if (parameters == "void" || !parameters) {
                  result.parameters = [];
                }
                return result;
              },
          peg$c142 = "inout",
          peg$c143 = { type: "literal", value: "inout", description: "\"inout\"" },
          peg$c144 = "in",
          peg$c145 = { type: "literal", value: "in", description: "\"in\"" },
          peg$c146 = "out",
          peg$c147 = { type: "literal", value: "out", description: "\"out\"" },
          peg$c148 = function(const_qualifier, parameter, precision, type_name, identifier, array_size) {
              var result = new node({
                type: "parameter",
                type_name: type_name,
                name: identifier.name
              });
              if (const_qualifier) result.typeQualifier = const_qualifier[0];
              if (parameter) result.parameterQualifier = parameter[0];
              if (precision) result.precision = precision[0];
              if (array_size) result.arraySize = array_size[1];
              // "const" is only legal on "in" parameter qualifiers.
              if (result.typeQualifier &&
                  result.parameterQualifier &&
                  result.parameterQualifier != "in") {
                return null;
              } else {
                return result;
              }
            },
          peg$c149 = function(head, tail) {
              return [ head ].concat(tail.map(function(item) { return item[1]; }));
            },
          peg$c150 = function(name) {
                return new node({
                  type: "declarator_item",
                  name:name
                });
              },
          peg$c151 = function(name, arraySize) {
                return new node({
                  type: "declarator_item",
                  name: name,
                  arraySize: arraySize,
                  isArray: true
                });
              },
          peg$c152 = function(name) {
                return new node({
                  type: "declarator_item",
                  name: name,
                  isArray: true
                });
              },
          peg$c153 = function(name, initializer) {
                return new node({
                  type: "declarator_item",
                  name: name,
                  initializer:initializer
                });
              },
          peg$c154 = function(declarators) {
               return declarators.map(function(item) {
                 return new node({
                   type: "declarator",
                   typeAttribute: item[0],
                   declarators: item[2]
                 })
                });
            },
          peg$c155 = "struct",
          peg$c156 = { type: "literal", value: "struct", description: "\"struct\"" },
          peg$c157 = function(qualifier, identifier, members, declarators) {
                var result = new node({
                  type: "struct_definition",
                  members:members
                });
                if (qualifier) {
                  result.qualifier = qualifier[0];
                }
                if (identifier) {
                  result.name = identifier[1].name;
                  typeNames[result.name] = result;
                }
                if (declarators) {
                  result.declarators = declarators;
                }
                return result;
              },
          peg$c158 = function(precision, name) {
              var result = new node({
                type: "type",
                name: name
              });
              if (precision) result.precision = precision[0];
              return result;
            },
          peg$c159 = { type: "other", description: "locally specified type" },
          peg$c160 = function(qualifier, type) {
              var result = type;
              if (qualifier) result.qualifier = qualifier[0];
              return result;
            },
          peg$c161 = "attribute",
          peg$c162 = { type: "literal", value: "attribute", description: "\"attribute\"" },
          peg$c163 = function() {
              return "attribute";
            },
          peg$c164 = function(qualifier, type) {
              var result = type;
              result.qualifier = qualifier;
              return result;
            },
          peg$c165 = { type: "other", description: "fully specified type" },
          peg$c166 = { type: "other", description: "precision qualifier" },
          peg$c167 = "highp",
          peg$c168 = { type: "literal", value: "highp", description: "\"highp\"" },
          peg$c169 = "mediump",
          peg$c170 = { type: "literal", value: "mediump", description: "\"mediump\"" },
          peg$c171 = "lowp",
          peg$c172 = { type: "literal", value: "lowp", description: "\"lowp\"" },
          peg$c173 = "const",
          peg$c174 = { type: "literal", value: "const", description: "\"const\"" },
          peg$c175 = { type: "other", description: "type qualifier" },
          peg$c176 = "varying",
          peg$c177 = { type: "literal", value: "varying", description: "\"varying\"" },
          peg$c178 = function() { return "invariant varying"; },
          peg$c179 = "uniform",
          peg$c180 = { type: "literal", value: "uniform", description: "\"uniform\"" },
          peg$c181 = { type: "other", description: "void" },
          peg$c182 = function() {
              return new node({
                type: "type",
                name: "void"
              })
            },
          peg$c183 = { type: "other", description: "type name" },
          peg$c184 = "float",
          peg$c185 = { type: "literal", value: "float", description: "\"float\"" },
          peg$c186 = "int",
          peg$c187 = { type: "literal", value: "int", description: "\"int\"" },
          peg$c188 = "bool",
          peg$c189 = { type: "literal", value: "bool", description: "\"bool\"" },
          peg$c190 = "sampler2D",
          peg$c191 = { type: "literal", value: "sampler2D", description: "\"sampler2D\"" },
          peg$c192 = "samplerCube",
          peg$c193 = { type: "literal", value: "samplerCube", description: "\"samplerCube\"" },
          peg$c194 = function(name) {
                if (name.name in typeNames) {
                   return name.name;
                } else {
                  return null;
                }
              },
          peg$c195 = { type: "other", description: "identifier" },
          peg$c196 = /^[^A-Za-z_0-9]/,
          peg$c197 = { type: "class", value: "[^A-Za-z_0-9]", description: "[^A-Za-z_0-9]" },
          peg$c198 = { type: "other", description: "keyword" },
          peg$c199 = "true",
          peg$c200 = { type: "literal", value: "true", description: "\"true\"" },
          peg$c201 = "false",
          peg$c202 = { type: "literal", value: "false", description: "\"false\"" },
          peg$c203 = /^[bi]/,
          peg$c204 = { type: "class", value: "[bi]", description: "[bi]" },
          peg$c205 = "vec",
          peg$c206 = { type: "literal", value: "vec", description: "\"vec\"" },
          peg$c207 = /^[234]/,
          peg$c208 = { type: "class", value: "[234]", description: "[234]" },
          peg$c209 = function(a) { return a.join(""); },
          peg$c210 = "mat",
          peg$c211 = { type: "literal", value: "mat", description: "\"mat\"" },
          peg$c212 = { type: "other", description: "reserved name" },
          peg$c213 = "__",
          peg$c214 = { type: "literal", value: "__", description: "\"__\"" },
          peg$c215 = /^[A-Za-z0-9]/,
          peg$c216 = { type: "class", value: "[A-Za-z0-9]", description: "[A-Za-z0-9]" },
          peg$c217 = "_",
          peg$c218 = { type: "literal", value: "_", description: "\"_\"" },
          peg$c219 = /^[1-9]/,
          peg$c220 = { type: "class", value: "[1-9]", description: "[1-9]" },
          peg$c221 = /^[0-9]/,
          peg$c222 = { type: "class", value: "[0-9]", description: "[0-9]" },
          peg$c223 = function(head, tail) {
                return new node({
                  type: "int",
                  value: parseInt([head].concat(tail).join(""), 10)
                });
              },
          peg$c224 = "0",
          peg$c225 = { type: "literal", value: "0", description: "\"0\"" },
          peg$c226 = /^[Xx]/,
          peg$c227 = { type: "class", value: "[Xx]", description: "[Xx]" },
          peg$c228 = /^[0-9A-Fa-f]/,
          peg$c229 = { type: "class", value: "[0-9A-Fa-f]", description: "[0-9A-Fa-f]" },
          peg$c230 = function(digits) {
                return new node({
                  type:"int",
                  value:parseInt(digits.join(""), 16)
                });
              },
          peg$c231 = /^[0-7]/,
          peg$c232 = { type: "class", value: "[0-7]", description: "[0-7]" },
          peg$c233 = function(digits) {
                return new node({
                  type:"int",
                  value:parseInt(digits.join(""), 8)
                });
              },
          peg$c234 = function() {
                return new node({
                  type: "int",
                  value: 0
                });
              },
          peg$c235 = ".",
          peg$c236 = { type: "literal", value: ".", description: "\".\"" },
          peg$c237 = function(digits) {
                digits[0] = digits[0].join("");
                digits[2] = digits[2].join("");
                return new node({
                  type: "float",
                  value:parseFloat(digits.join(""))
                });
              },
          peg$c238 = function(digits) {
                return new node({
                  type: "float",
                  value: parseFloat(digits[0].join("") + digits[1])
                });
            },
          peg$c239 = /^[Ee]/,
          peg$c240 = { type: "class", value: "[Ee]", description: "[Ee]" },
          peg$c241 = /^[+\-]/,
          peg$c242 = { type: "class", value: "[+\\-]", description: "[+\\-]" },
          peg$c243 = function(sign, exponent) {
                return ["e", sign].concat(exponent).join("");
             },
          peg$c244 = function(expression) {
                return expression;
              },
          peg$c245 = function(value) {
              return new node({
                type: "bool",
                value: value == "true"
              });
            },
          peg$c246 = function(index) {
              return new node({
                type: "accessor",
                index: index
              });
            },
          peg$c247 = function(id) {
              return new node({
                type: "field_selector",
                selection: id.name
              })
            },
          peg$c248 = function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = new node({
                    type: "postfix",
                    operator: tail[i],
                    expression: result
                  })
                }
                return result;
              },
          peg$c249 = "++",
          peg$c250 = { type: "literal", value: "++", description: "\"++\"" },
          peg$c251 = "--",
          peg$c252 = { type: "literal", value: "--", description: "\"--\"" },
          peg$c253 = function(head, tail, rest) {
                var result = head;
                if(tail) {
                  result = new node({
                    type: "postfix",
                    operator: new node({
                      id: next_id++,
                      type: "operator",
                      operator: tail
                    }),
                    expression: result
                  })
                }
                for (var i = 0; i < rest.length; i++) {
                  result = new node({
                    type: "postfix",
                    operator: rest[i],
                    expression: result
                  })
                }
                return result;
              },
          peg$c254 = function() {return []; },
          peg$c255 = function(head, tail) {
                return [ head ].concat(tail.map(function(item) { return item[1] }));
              },
          peg$c256 = function(function_name, parameters) {
                var result = new node({
                  type: "function_call",
                  function_name: function_name,
                  parameters: parameters
                });
                if (!parameters) {
                  result.parameters = [];
                }
                return result;
              },
          peg$c257 = function(id) {return id.name;},
          peg$c258 = "!",
          peg$c259 = { type: "literal", value: "!", description: "\"!\"" },
          peg$c260 = "~",
          peg$c261 = { type: "literal", value: "~", description: "\"~\"" },
          peg$c262 = "+",
          peg$c263 = { type: "literal", value: "+", description: "\"+\"" },
          peg$c264 = "-",
          peg$c265 = { type: "literal", value: "-", description: "\"-\"" },
          peg$c266 = function(head, tail) {
                result = tail
                if (head) {
                  result = new node({
                    type: "unary",
                    expression: result,
                    operator: new node({
                      type: "operator",
                      operator: head
                    })
                  });
                }
                return result;
              },
          peg$c267 = "*",
          peg$c268 = { type: "literal", value: "*", description: "\"*\"" },
          peg$c269 = "/",
          peg$c270 = { type: "literal", value: "/", description: "\"/\"" },
          peg$c271 = "%",
          peg$c272 = { type: "literal", value: "%", description: "\"%\"" },
          peg$c273 = function(operator) {
              return new node({
                type: "operator",
                operator: operator
              });
            },
          peg$c274 = function(head, tail) {
                return daisy_chain(head, tail);
              },
          peg$c275 = function() {
              return new node({
                type: "operator",
                operator: "+"
              });
            },
          peg$c276 = function() {
              return new node({
                type: "operator",
                operator: "-"
              });
            },
          peg$c277 = "<<",
          peg$c278 = { type: "literal", value: "<<", description: "\"<<\"" },
          peg$c279 = ">>",
          peg$c280 = { type: "literal", value: ">>", description: "\">>\"" },
          peg$c281 = "<",
          peg$c282 = { type: "literal", value: "<", description: "\"<\"" },
          peg$c283 = function(equal) {
              return new node({
                type: "operator",
                operator: "<" + (equal || "")
              });
            },
          peg$c284 = ">",
          peg$c285 = { type: "literal", value: ">", description: "\">\"" },
          peg$c286 = function(equal) {
              return new node({
                type: "operator",
                operator: ">" + (equal || "")
              });
            },
          peg$c287 = "==",
          peg$c288 = { type: "literal", value: "==", description: "\"==\"" },
          peg$c289 = "!=",
          peg$c290 = { type: "literal", value: "!=", description: "\"!=\"" },
          peg$c291 = function(operator) {
               return new node({
                 type: "operator",
                 operator: operator
               });
             },
          peg$c292 = "&",
          peg$c293 = { type: "literal", value: "&", description: "\"&\"" },
          peg$c294 = function() {
               return new node({
                 type: "operator",
                 operator: "&"
               });
             },
          peg$c295 = "^",
          peg$c296 = { type: "literal", value: "^", description: "\"^\"" },
          peg$c297 = function() {
               return new node({
                 type: "operator",
                 operator: "^"
               });
             },
          peg$c298 = "|",
          peg$c299 = { type: "literal", value: "|", description: "\"|\"" },
          peg$c300 = function() {
               return new node({
                 type: "operator",
                 operator: "|"
               });
             },
          peg$c301 = "&&",
          peg$c302 = { type: "literal", value: "&&", description: "\"&&\"" },
          peg$c303 = function() {
               return new node({
                 type: "operator",
                 operator: "&&"
               });
             },
          peg$c304 = "^^",
          peg$c305 = { type: "literal", value: "^^", description: "\"^^\"" },
          peg$c306 = function() {
               return new node({
                 type: "operator",
                 operator: "^^"
               });
             },
          peg$c307 = "||",
          peg$c308 = { type: "literal", value: "||", description: "\"||\"" },
          peg$c309 = function() {
               return new node({
                 type: "operator",
                 operator: "||"
               });
             },
          peg$c310 = "?",
          peg$c311 = { type: "literal", value: "?", description: "\"?\"" },
          peg$c312 = ":",
          peg$c313 = { type: "literal", value: ":", description: "\":\"" },
          peg$c314 = function(head, tail) {
                result = head;
                if (tail) {
                  result = new node({
                    type: "ternary",
                    condition: head,
                    is_true: tail[3],
                    is_false: tail[7]
                  })
                }
                return result;
              },
          peg$c315 = "*=",
          peg$c316 = { type: "literal", value: "*=", description: "\"*=\"" },
          peg$c317 = "/=",
          peg$c318 = { type: "literal", value: "/=", description: "\"/=\"" },
          peg$c319 = "%=",
          peg$c320 = { type: "literal", value: "%=", description: "\"%=\"" },
          peg$c321 = "+=",
          peg$c322 = { type: "literal", value: "+=", description: "\"+=\"" },
          peg$c323 = "-=",
          peg$c324 = { type: "literal", value: "-=", description: "\"-=\"" },
          peg$c325 = "<<=",
          peg$c326 = { type: "literal", value: "<<=", description: "\"<<=\"" },
          peg$c327 = ">>=",
          peg$c328 = { type: "literal", value: ">>=", description: "\">>=\"" },
          peg$c329 = "&=",
          peg$c330 = { type: "literal", value: "&=", description: "\"&=\"" },
          peg$c331 = "^=",
          peg$c332 = { type: "literal", value: "^=", description: "\"^=\"" },
          peg$c333 = "|=",
          peg$c334 = { type: "literal", value: "|=", description: "\"|=\"" },
          peg$c335 = function(variable, operator, expression) {
                return new node({
                  type: "binary",
                  operator: new node({
                    type: "operator",
                    operator: operator
                  }),
                  left: variable,
                  right: expression
                });
              },
  
          peg$currPos          = 0,
          peg$reportedPos      = 0,
          peg$cachedPos        = 0,
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
          peg$maxFailPos       = 0,
          peg$maxFailExpected  = [],
          peg$silentFails      = 0,
  
          peg$result;
  
      if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
          throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
  
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
      }
  
      function text() {
        return input.substring(peg$reportedPos, peg$currPos);
      }
  
      function offset() {
        return peg$reportedPos;
      }
  
      function line() {
        return peg$computePosDetails(peg$reportedPos).line;
      }
  
      function column() {
        return peg$computePosDetails(peg$reportedPos).column;
      }
  
      function expected(description) {
        throw peg$buildException(
          null,
          [{ type: "other", description: description }],
          peg$reportedPos
        );
      }
  
      function error(message) {
        throw peg$buildException(message, null, peg$reportedPos);
      }
  
      function peg$computePosDetails(pos) {
        function advance(details, startPos, endPos) {
          var p, ch;
  
          for (p = startPos; p < endPos; p++) {
            ch = input.charAt(p);
            if (ch === "\n") {
              if (!details.seenCR) { details.line++; }
              details.column = 1;
              details.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              details.line++;
              details.column = 1;
              details.seenCR = true;
            } else {
              details.column++;
              details.seenCR = false;
            }
          }
        }
  
        if (peg$cachedPos !== pos) {
          if (peg$cachedPos > pos) {
            peg$cachedPos = 0;
            peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advance(peg$cachedPosDetails, peg$cachedPos, pos);
          peg$cachedPos = pos;
        }
  
        return peg$cachedPosDetails;
      }
  
      function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) { return; }
  
        if (peg$currPos > peg$maxFailPos) {
          peg$maxFailPos = peg$currPos;
          peg$maxFailExpected = [];
        }
  
        peg$maxFailExpected.push(expected);
      }
  
      function peg$buildException(message, expected, pos) {
        function cleanupExpected(expected) {
          var i = 1;
  
          expected.sort(function(a, b) {
            if (a.description < b.description) {
              return -1;
            } else if (a.description > b.description) {
              return 1;
            } else {
              return 0;
            }
          });
  
          while (i < expected.length) {
            if (expected[i - 1] === expected[i]) {
              expected.splice(i, 1);
            } else {
              i++;
            }
          }
        }
  
        function buildMessage(expected, found) {
          function stringEscape(s) {
            function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }
  
            return s
              .replace(/\\/g,   '\\\\')
              .replace(/"/g,    '\\"')
              .replace(/\x08/g, '\\b')
              .replace(/\t/g,   '\\t')
              .replace(/\n/g,   '\\n')
              .replace(/\f/g,   '\\f')
              .replace(/\r/g,   '\\r')
              .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
              .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
              .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
              .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
          }
  
          var expectedDescs = new Array(expected.length),
              expectedDesc, foundDesc, i;
  
          for (i = 0; i < expected.length; i++) {
            expectedDescs[i] = expected[i].description;
          }
  
          expectedDesc = expected.length > 1
            ? expectedDescs.slice(0, -1).join(", ")
                + " or "
                + expectedDescs[expected.length - 1]
            : expectedDescs[0];
  
          foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
  
          return "Expected " + expectedDesc + " but " + foundDesc + " found.";
        }
  
        var posDetails = peg$computePosDetails(pos),
            found      = pos < input.length ? input.charAt(pos) : null;
  
        if (expected !== null) {
          cleanupExpected(expected);
        }
  
        return new SyntaxError(
          message !== null ? message : buildMessage(expected, found),
          expected,
          found,
          pos,
          posDetails.line,
          posDetails.column
        );
      }
  
      function peg$parsestart() {
        var s0;
  
        s0 = peg$parseexternal_statement_list();
  
        return s0;
      }
  
      function peg$parsevertex_start() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c1();
        if (s1) {
          s1 = peg$c2;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexternal_statement_list();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c3(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsefragment_start() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c4();
        if (s1) {
          s1 = peg$c2;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexternal_statement_list();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c3(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsenewLine() {
        var s0, s1;
  
        s0 = peg$currPos;
        if (peg$c5.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c7();
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parseEOF() {
        var s0, s1;
  
        s0 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        peg$silentFails--;
        if (s1 === peg$FAILED) {
          s0 = peg$c2;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parse_() {
        var s0, s1;
  
        peg$silentFails++;
        s0 = [];
        s1 = peg$parsenewLine();
        if (s1 === peg$FAILED) {
          if (peg$c11.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c12); }
          }
          if (s1 === peg$FAILED) {
            if (peg$c13.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parsecomment();
            }
          }
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parsenewLine();
            if (s1 === peg$FAILED) {
              if (peg$c11.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c12); }
              }
              if (s1 === peg$FAILED) {
                if (peg$c13.test(input.charAt(peg$currPos))) {
                  s1 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s1 === peg$FAILED) {
                  s1 = peg$parsecomment();
                }
              }
            }
          }
        } else {
          s0 = peg$c0;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c9); }
        }
  
        return s0;
      }
  
      function peg$parsenoNewlineComment() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s1 = peg$c15;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c17) {
            s5 = peg$c17;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c17) {
              s5 = peg$c17;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c2;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c17) {
              s3 = peg$c17;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c19) {
            s1 = peg$c19;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c21.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c21.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
            }
            if (s2 !== peg$FAILED) {
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
  
        return s0;
      }
  
      function peg$parsenoNewlineWhitespace() {
        var s0, s1;
  
        s0 = [];
        if (peg$c13.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$parsenoNewlineComment();
        }
        if (s1 !== peg$FAILED) {
          while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c13.test(input.charAt(peg$currPos))) {
              s1 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c14); }
            }
            if (s1 === peg$FAILED) {
              s1 = peg$parsenoNewlineComment();
            }
          }
        } else {
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsecomment() {
        var s0, s1, s2, s3, s4, s5;
  
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s1 = peg$c15;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c17) {
            s5 = peg$c17;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c18); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = peg$c2;
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c17) {
              s5 = peg$c17;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = peg$c2;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c17) {
              s3 = peg$c17;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c18); }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c19) {
            s1 = peg$c19;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c20); }
          }
          if (s1 !== peg$FAILED) {
            s2 = [];
            if (peg$c21.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c21.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsenewLine();
              if (s3 === peg$FAILED) {
                s3 = peg$parseEOF();
              }
              if (s3 !== peg$FAILED) {
                s1 = [s1, s2, s3];
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
  
        return s0;
      }
  
      function peg$parsesemicolon() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 59) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsecomma() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s2 = peg$c27;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseleft_bracket() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s2 = peg$c29;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseright_bracket() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s2 = peg$c31;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseequals() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c33;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseleft_paren() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s2 = peg$c35;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c36); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseright_paren() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s2 = peg$c37;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseleft_brace() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s2 = peg$c39;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseright_brace() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s2 = peg$c41;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseexternal_statement_list() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseexternal_statement();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parseexternal_statement();
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c43(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parseexternal_statement() {
        var s0, s1;
  
        s0 = peg$currPos;
        s1 = peg$parsepreprocessor_external_branch();
        if (s1 === peg$FAILED) {
          s1 = peg$parseexternal_declaration();
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c44(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parse_();
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c45();
          }
          s0 = s1;
        }
  
        return s0;
      }
  
      function peg$parseexternal_declaration() {
        var s0;
  
        s0 = peg$parsefunction_definition();
        if (s0 === peg$FAILED) {
          s0 = peg$parseglobal_declaration();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepreprocessor_define();
            if (s0 === peg$FAILED) {
              s0 = peg$parsepreprocessor_operator();
              if (s0 === peg$FAILED) {
                s0 = peg$parsestruct_definition();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsemacro_call();
                }
              }
            }
          }
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_operator() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c48) {
            s2 = peg$c48;
            peg$currPos += 5;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c49); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c50) {
              s2 = peg$c50;
              peg$currPos += 6;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c51); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c52) {
                s2 = peg$c52;
                peg$currPos += 7;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c53); }
              }
              if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c54) {
                  s2 = peg$c54;
                  peg$currPos += 5;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c55); }
                }
                if (s2 === peg$FAILED) {
                  if (input.substr(peg$currPos, 9) === peg$c56) {
                    s2 = peg$c56;
                    peg$currPos += 9;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c57); }
                  }
                  if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c58) {
                      s2 = peg$c58;
                      peg$currPos += 4;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c59); }
                    }
                  }
                }
              }
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              s5 = [];
              if (peg$c21.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c22); }
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c21.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s4;
                s5 = peg$c60(s5);
              }
              s4 = s5;
              if (s4 !== peg$FAILED) {
                s5 = peg$parsenewLine();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseEOF();
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c61(s2, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemacro_identifier() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (peg$c62.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c63); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c64.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c65); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c64.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c66(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_parameter_list() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c35;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsemacro_identifier();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            s4 = peg$currPos;
            s5 = peg$parsecomma();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsemacro_identifier();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$currPos;
              s5 = peg$parsecomma();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsemacro_identifier();
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$c0;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseright_paren();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c67(s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemacro_paren_parameter() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        s1 = peg$parseleft_paren();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = [];
          if (peg$c68.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c69); }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$c68.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c69); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsemacro_paren_parameter();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = [];
              if (peg$c68.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c69); }
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c68.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c69); }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$reportedPos = s2;
                s3 = peg$c70(s3, s4, s5);
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseright_paren();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c71(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemacro_call_parameter() {
        var s0, s1, s2;
  
        s0 = peg$parsemacro_paren_parameter();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = [];
          if (peg$c72.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); }
          }
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c72.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c73); }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c74(s1);
          }
          s0 = s1;
        }
  
        return s0;
      }
  
      function peg$parsemacro_call_parameter_list() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parsemacro_call_parameter();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemacro_call_parameter();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemacro_call_parameter();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c75(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemacro_call() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parsemacro_identifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseleft_paren();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseparameter_list();
              if (s4 === peg$FAILED) {
                s4 = peg$c24;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s5 = peg$c37;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c38); }
                }
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c76(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemacro_call_line() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parsemacro_call();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c21.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c21.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c77(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_define() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c78) {
              s3 = peg$c78;
              peg$currPos += 6;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemacro_identifier();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsepreprocessor_parameter_list();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c24;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    if (peg$c80.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c81); }
                    }
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      if (peg$c80.test(input.charAt(peg$currPos))) {
                        s8 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c81); }
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$currPos;
                      s9 = [];
                      if (peg$c21.test(input.charAt(peg$currPos))) {
                        s10 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c22); }
                      }
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        if (peg$c21.test(input.charAt(peg$currPos))) {
                          s10 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c22); }
                        }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$reportedPos = s8;
                        s9 = peg$c60(s9);
                      }
                      s8 = s9;
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parsenewLine();
                        if (s9 === peg$FAILED) {
                          s9 = peg$parseEOF();
                        }
                        if (s9 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c82(s5, s6, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_if() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c83) {
              s3 = peg$c83;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c85) {
                s3 = peg$c85;
                peg$currPos += 6;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c86); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c87) {
                  s3 = peg$c87;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c88); }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                if (peg$c21.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c21.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c60(s6);
                }
                s5 = s6;
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsenewLine();
                  if (s6 === peg$FAILED) {
                    s6 = peg$parseEOF();
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c89(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_else_if() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c90) {
              s3 = peg$c90;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c91); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$currPos;
                s6 = [];
                if (peg$c21.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c21.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$reportedPos = s5;
                  s6 = peg$c60(s6);
                }
                s5 = s6;
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsenewLine();
                  if (s6 === peg$FAILED) {
                    s6 = peg$parseEOF();
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c92(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_else() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c93) {
              s3 = peg$c93;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c94); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsenoNewlineWhitespace();
              if (s4 === peg$FAILED) {
                s4 = peg$c24;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsenewLine();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c95();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_end() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 35) {
          s1 = peg$c46;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c96) {
              s3 = peg$c96;
              peg$currPos += 5;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsenoNewlineWhitespace();
              if (s4 === peg$FAILED) {
                s4 = peg$c24;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsenewLine();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseEOF();
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c24;
                  }
                  if (s6 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_external_branch() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsepreprocessor_if();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexternal_statement_list();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsepreprocessor_else_if();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexternal_statement_list();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsepreprocessor_else_if();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexternal_statement_list();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsepreprocessor_else();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexternal_statement_list();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsepreprocessor_end();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c98(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepreprocessor_statement_branch() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsepreprocessor_if();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestatement_list();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsepreprocessor_else_if();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsestatement_list();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsepreprocessor_else_if();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestatement_list();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parsepreprocessor_else();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestatement_list();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsepreprocessor_end();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c98(s1, s2, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsefunction_definition() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = peg$parsefunction_prototype();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsecompound_statement();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c99(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsecompound_statement() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseleft_brace();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatement_list();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseright_brace();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c100(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsestatement_list() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsestatement_no_new_scope();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsestatement_no_new_scope();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c101(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsestatement_no_new_scope() {
        var s0;
  
        s0 = peg$parsecompound_statement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesimple_statement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepreprocessor_statement_branch();
          }
        }
  
        return s0;
      }
  
      function peg$parsestatement_with_scope() {
        var s0;
  
        s0 = peg$parsecompound_statement();
        if (s0 === peg$FAILED) {
          s0 = peg$parsesimple_statement();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepreprocessor_statement_branch();
          }
        }
  
        return s0;
      }
  
      function peg$parsesimple_statement() {
        var s0, s1;
  
        s0 = peg$currPos;
        s1 = peg$parsedeclaration();
        if (s1 === peg$FAILED) {
          s1 = peg$parseexpression_statement();
          if (s1 === peg$FAILED) {
            s1 = peg$parseselection_statement();
            if (s1 === peg$FAILED) {
              s1 = peg$parseiteration_statement();
              if (s1 === peg$FAILED) {
                s1 = peg$parsejump_statement();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsepreprocessor_define();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsepreprocessor_operator();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsemacro_call();
                    }
                  }
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c102(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parseselection_statement() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c87) {
          s1 = peg$c87;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseleft_paren();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseassignment_expression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseright_paren();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsestatement_with_scope();
                if (s5 !== peg$FAILED) {
                  s6 = peg$currPos;
                  if (input.substr(peg$currPos, 4) === peg$c93) {
                    s7 = peg$c93;
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c94); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 === peg$FAILED) {
                      s8 = peg$c24;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestatement_with_scope();
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$c0;
                  }
                  if (s6 === peg$FAILED) {
                    s6 = peg$c24;
                  }
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c103(s3, s5, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsefor_loop() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c104) {
          s1 = peg$c104;
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c105); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseleft_paren();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpression_statement();
            if (s3 === peg$FAILED) {
              s3 = peg$parsedeclaration();
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecondition();
              if (s4 === peg$FAILED) {
                s4 = peg$c24;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsesemicolon();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseassignment_expression();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c24;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseright_paren();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsestatement_no_new_scope();
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c106(s3, s4, s6, s8);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsewhile_statement() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c107) {
          s1 = peg$c107;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c108); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseleft_paren();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsecondition();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseright_paren();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c109(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsewhile_loop() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = peg$parsewhile_statement();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatement_no_new_scope();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c110(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsedo_while() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c111) {
          s1 = peg$c111;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsestatement_with_scope();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsewhile_statement();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c113(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseiteration_statement() {
        var s0;
  
        s0 = peg$parsewhile_loop();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedo_while();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefor_loop();
          }
        }
  
        return s0;
      }
  
      function peg$parsejump_statement() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 6) === peg$c114) {
          s1 = peg$c114;
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c115); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseassignment_expression();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesemicolon();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c116(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 8) === peg$c117) {
            s2 = peg$c117;
            peg$currPos += 8;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c118); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsesemicolon();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 5) === peg$c119) {
              s2 = peg$c119;
              peg$currPos += 5;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c120); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parsesemicolon();
              if (s3 !== peg$FAILED) {
                s2 = [s2, s3];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
            if (s1 === peg$FAILED) {
              s1 = peg$currPos;
              if (input.substr(peg$currPos, 6) === peg$c114) {
                s2 = peg$c114;
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c115); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parsesemicolon();
                if (s3 !== peg$FAILED) {
                  s2 = [s2, s3];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
              if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = peg$currPos;
                peg$reportedPos = peg$currPos;
                s3 = peg$c121();
                if (s3) {
                  s3 = peg$c2;
                } else {
                  s3 = peg$c0;
                }
                if (s3 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 7) === peg$c122) {
                    s4 = peg$c122;
                    peg$currPos += 7;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c123); }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s2;
                    s3 = peg$c124();
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parsesemicolon();
                  if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$c0;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              }
            }
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c125(s1);
          }
          s0 = s1;
        }
  
        return s0;
      }
  
      function peg$parseexpression_statement() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        s1 = peg$parseassignment_expression();
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesemicolon();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c126(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsedeclaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parsefunction_prototype();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesemicolon();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c128(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parselocally_specified_type();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinit_declarator_list();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsesemicolon();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c129(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            peg$reportedPos = peg$currPos;
            s1 = peg$c130();
            if (s1) {
              s1 = peg$c2;
            } else {
              s1 = peg$c0;
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c131) {
                s2 = peg$c131;
                peg$currPos += 9;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c132); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseidentifier();
                  if (s4 !== peg$FAILED) {
                    s5 = [];
                    s6 = peg$currPos;
                    s7 = peg$parsecomma();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseidentifier();
                      if (s8 !== peg$FAILED) {
                        s7 = [s7, s8];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$c0;
                    }
                    while (s6 !== peg$FAILED) {
                      s5.push(s6);
                      s6 = peg$currPos;
                      s7 = peg$parsecomma();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseidentifier();
                        if (s8 !== peg$FAILED) {
                          s7 = [s7, s8];
                          s6 = s7;
                        } else {
                          peg$currPos = s6;
                          s6 = peg$c0;
                        }
                      } else {
                        peg$currPos = s6;
                        s6 = peg$c0;
                      }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parsesemicolon();
                      if (s6 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c133(s4, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 9) === peg$c134) {
                s1 = peg$c134;
                peg$currPos += 9;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c135); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseprecision_qualifier();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsetype_name();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parsesemicolon();
                        if (s6 !== peg$FAILED) {
                          peg$reportedPos = s0;
                          s1 = peg$c136(s3, s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c127); }
        }
  
        return s0;
      }
  
      function peg$parseglobal_declaration() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$parsedeclaration();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsefully_specified_type();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseinit_declarator_list();
              if (s3 !== peg$FAILED) {
                s4 = peg$parsesemicolon();
                if (s4 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c137(s1, s3);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseattribute_type();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsedeclarator_list_no_array();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsesemicolon();
                  if (s4 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c137(s1, s3);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          }
        }
  
        return s0;
      }
  
      function peg$parsefunction_prototype_parameter_list() {
        var s0, s1, s2, s3, s4, s5;
  
        if (input.substr(peg$currPos, 4) === peg$c138) {
          s0 = peg$c138;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseparameter_declaration();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseparameter_declaration();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parsecomma();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseparameter_declaration();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c140(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
  
        return s0;
      }
  
      function peg$parsefunction_prototype() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        s1 = peg$parsevoid_type();
        if (s1 === peg$FAILED) {
          s1 = peg$parseprecision_type();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseleft_paren();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsefunction_prototype_parameter_list();
                if (s5 === peg$FAILED) {
                  s5 = peg$c24;
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseright_paren();
                  if (s6 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c141(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseparameter_qualifier() {
        var s0;
  
        if (input.substr(peg$currPos, 5) === peg$c142) {
          s0 = peg$c142;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c143); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c144) {
            s0 = peg$c144;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c145); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c146) {
              s0 = peg$c146;
              peg$currPos += 3;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c147); }
            }
          }
        }
  
        return s0;
      }
  
      function peg$parseparameter_declaration() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseconst_qualifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseparameter_qualifier();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseprecision_qualifier();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsetype_name();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseidentifier();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    s8 = peg$parseleft_bracket();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseconditional_expression();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseright_bracket();
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$c0;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$c0;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$c0;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = peg$c24;
                    }
                    if (s7 !== peg$FAILED) {
                      peg$reportedPos = s0;
                      s1 = peg$c148(s1, s2, s3, s4, s6, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseinit_declarator_list() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parseinit_declarator();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseinit_declarator();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseinit_declarator();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsedeclarator_list() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parsedeclarator();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedeclarator();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedeclarator();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsedeclarator_list_no_array() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parsedeclarator_no_array();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedeclarator_no_array();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedeclarator_no_array();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsedeclarator_list_arrays_have_size() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parsedeclarator_array_with_size();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parsecomma();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedeclarator_array_with_size();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedeclarator_array_with_size();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c149(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsedeclarator_no_array() {
        var s0, s1;
  
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c150(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parsedeclarator_array_with_size() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseleft_bracket();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseconditional_expression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseright_bracket();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c151(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedeclarator_no_array();
        }
  
        return s0;
      }
  
      function peg$parsedeclarator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseleft_bracket();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseright_bracket();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c152(s1);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedeclarator_array_with_size();
        }
  
        return s0;
      }
  
      function peg$parseinit_declarator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseequals();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseconditional_expression();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c153(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsedeclarator();
        }
  
        return s0;
      }
  
      function peg$parsemember_list() {
        var s0, s1, s2, s3, s4, s5, s6;
  
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$parselocally_specified_type();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsedeclarator_list_arrays_have_size();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesemicolon();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$parselocally_specified_type();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsedeclarator_list_arrays_have_size();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsesemicolon();
                  if (s6 !== peg$FAILED) {
                    s3 = [s3, s4, s5, s6];
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          }
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c154(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parsestruct_definition() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsetype_qualifier();
        if (s2 === peg$FAILED) {
          s2 = peg$parseattribute_qualifier();
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c155) {
            s2 = peg$c155;
            peg$currPos += 6;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c156); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseidentifier();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseleft_brace();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsemember_list();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseright_brace();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsedeclarator_list();
                    if (s7 === peg$FAILED) {
                      s7 = peg$c24;
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parsesemicolon();
                      if (s8 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c157(s1, s3, s5, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseprecision_type() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseprecision_qualifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsetype_name();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c158(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parselocally_specified_type() {
        var s0, s1, s2, s3;
  
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseconst_qualifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprecision_type();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c160(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
  
        return s0;
      }
  
      function peg$parseattribute_qualifier() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        peg$reportedPos = peg$currPos;
        s1 = peg$c130();
        if (s1) {
          s1 = peg$c2;
        } else {
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c161) {
            s2 = peg$c161;
            peg$currPos += 9;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c162); }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c163();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseattribute_type() {
        var s0, s1, s2, s3;
  
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$parseattribute_qualifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseprecision_type();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c164(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c159); }
        }
  
        return s0;
      }
  
      function peg$parsefully_specified_type() {
        var s0, s1, s2, s3;
  
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parsetype_qualifier();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseprecision_type();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c160(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c165); }
        }
  
        return s0;
      }
  
      function peg$parseprecision_qualifier() {
        var s0, s1;
  
        peg$silentFails++;
        if (input.substr(peg$currPos, 5) === peg$c167) {
          s0 = peg$c167;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c168); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c169) {
            s0 = peg$c169;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c170); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c171) {
              s0 = peg$c171;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c172); }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c166); }
        }
  
        return s0;
      }
  
      function peg$parseconst_qualifier() {
        var s0;
  
        if (input.substr(peg$currPos, 5) === peg$c173) {
          s0 = peg$c173;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c174); }
        }
  
        return s0;
      }
  
      function peg$parsetype_qualifier() {
        var s0, s1, s2, s3;
  
        peg$silentFails++;
        s0 = peg$parseconst_qualifier();
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c176) {
            s0 = peg$c176;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c177); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c131) {
              s1 = peg$c131;
              peg$currPos += 9;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c132); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c176) {
                  s3 = peg$c176;
                  peg$currPos += 7;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c177); }
                }
                if (s3 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c178();
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 7) === peg$c179) {
                s0 = peg$c179;
                peg$currPos += 7;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c180); }
              }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c175); }
        }
  
        return s0;
      }
  
      function peg$parsevoid_type() {
        var s0, s1;
  
        peg$silentFails++;
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c138) {
          s1 = peg$c138;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c182();
        }
        s0 = s1;
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c181); }
        }
  
        return s0;
      }
  
      function peg$parsetype_name() {
        var s0, s1;
  
        peg$silentFails++;
        if (input.substr(peg$currPos, 5) === peg$c184) {
          s0 = peg$c184;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c185); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c186) {
            s0 = peg$c186;
            peg$currPos += 3;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c187); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c188) {
              s0 = peg$c188;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c189); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c190) {
                s0 = peg$c190;
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c191); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 11) === peg$c192) {
                  s0 = peg$c192;
                  peg$currPos += 11;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c193); }
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$parsevector();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsematrix();
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseidentifier();
                      if (s1 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c194(s1);
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c183); }
        }
  
        return s0;
      }
  
      function peg$parseidentifier() {
        var s0, s1, s2, s3, s4;
  
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = peg$currPos;
        peg$silentFails++;
        s2 = peg$currPos;
        s3 = peg$parsekeyword();
        if (s3 !== peg$FAILED) {
          if (peg$c196.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c197); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        peg$silentFails--;
        if (s2 === peg$FAILED) {
          s1 = peg$c2;
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c64.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c64.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c65); }
              }
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c66(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c195); }
        }
  
        return s0;
      }
  
      function peg$parsekeyword() {
        var s0, s1;
  
        peg$silentFails++;
        if (input.substr(peg$currPos, 9) === peg$c161) {
          s0 = peg$c161;
          peg$currPos += 9;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c162); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c173) {
            s0 = peg$c173;
            peg$currPos += 5;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c174); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c188) {
              s0 = peg$c188;
              peg$currPos += 4;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c189); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c184) {
                s0 = peg$c184;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c185); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c186) {
                  s0 = peg$c186;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c187); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c119) {
                    s0 = peg$c119;
                    peg$currPos += 5;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c120); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 8) === peg$c117) {
                      s0 = peg$c117;
                      peg$currPos += 8;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c118); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c111) {
                        s0 = peg$c111;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c112); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c93) {
                          s0 = peg$c93;
                          peg$currPos += 4;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c94); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c104) {
                            s0 = peg$c104;
                            peg$currPos += 3;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c105); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c87) {
                              s0 = peg$c87;
                              peg$currPos += 2;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c88); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 7) === peg$c122) {
                                s0 = peg$c122;
                                peg$currPos += 7;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c123); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 6) === peg$c114) {
                                  s0 = peg$c114;
                                  peg$currPos += 6;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c115); }
                                }
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsevector();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsematrix();
                                    if (s0 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 2) === peg$c144) {
                                        s0 = peg$c144;
                                        peg$currPos += 2;
                                      } else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c145); }
                                      }
                                      if (s0 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c146) {
                                          s0 = peg$c146;
                                          peg$currPos += 3;
                                        } else {
                                          s0 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c147); }
                                        }
                                        if (s0 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 5) === peg$c142) {
                                            s0 = peg$c142;
                                            peg$currPos += 5;
                                          } else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c143); }
                                          }
                                          if (s0 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 7) === peg$c179) {
                                              s0 = peg$c179;
                                              peg$currPos += 7;
                                            } else {
                                              s0 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c180); }
                                            }
                                            if (s0 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 7) === peg$c176) {
                                                s0 = peg$c176;
                                                peg$currPos += 7;
                                              } else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c177); }
                                              }
                                              if (s0 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 9) === peg$c190) {
                                                  s0 = peg$c190;
                                                  peg$currPos += 9;
                                                } else {
                                                  s0 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c191); }
                                                }
                                                if (s0 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 11) === peg$c192) {
                                                    s0 = peg$c192;
                                                    peg$currPos += 11;
                                                  } else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c193); }
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 6) === peg$c155) {
                                                      s0 = peg$c155;
                                                      peg$currPos += 6;
                                                    } else {
                                                      s0 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c156); }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 4) === peg$c138) {
                                                        s0 = peg$c138;
                                                        peg$currPos += 4;
                                                      } else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c139); }
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 5) === peg$c107) {
                                                          s0 = peg$c107;
                                                          peg$currPos += 5;
                                                        } else {
                                                          s0 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c108); }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 5) === peg$c167) {
                                                            s0 = peg$c167;
                                                            peg$currPos += 5;
                                                          } else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c168); }
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 7) === peg$c169) {
                                                              s0 = peg$c169;
                                                              peg$currPos += 7;
                                                            } else {
                                                              s0 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c170); }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              if (input.substr(peg$currPos, 4) === peg$c171) {
                                                                s0 = peg$c171;
                                                                peg$currPos += 4;
                                                              } else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) { peg$fail(peg$c172); }
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c199) {
                                                                  s0 = peg$c199;
                                                                  peg$currPos += 4;
                                                                } else {
                                                                  s0 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$c200); }
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  if (input.substr(peg$currPos, 5) === peg$c201) {
                                                                    s0 = peg$c201;
                                                                    peg$currPos += 5;
                                                                  } else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) { peg$fail(peg$c202); }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c198); }
        }
  
        return s0;
      }
  
      function peg$parsevector() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (peg$c203.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c204); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$c24;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c205) {
            s3 = peg$c205;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c206); }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c207.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c208); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c209(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parsematrix() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 3) === peg$c210) {
          s2 = peg$c210;
          peg$currPos += 3;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c211); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$c207.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c208); }
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c209(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parsereserved() {
        var s0, s1, s2, s3, s4;
  
        peg$silentFails++;
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesingle_underscore_identifier();
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsesingle_underscore_identifier();
        }
        if (s1 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c213) {
            s2 = peg$c213;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c214); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c64.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c64.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c65); }
              }
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c212); }
        }
  
        return s0;
      }
  
      function peg$parsesingle_underscore_identifier() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = [];
        if (peg$c215.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c216); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c215.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c216); }
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c217;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c218); }
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c215.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c216); }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c215.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c216); }
                }
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              s1 = [s1, s2, s3];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseint_constant() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        if (peg$c219.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c220); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          if (peg$c221.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c222); }
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c221.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c222); }
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c223(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c224;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c225); }
          }
          if (s1 !== peg$FAILED) {
            if (peg$c226.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c227); }
            }
            if (s2 !== peg$FAILED) {
              s3 = [];
              if (peg$c228.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c229); }
              }
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  if (peg$c228.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c229); }
                  }
                }
              } else {
                s3 = peg$c0;
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c230(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 48) {
              s1 = peg$c224;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c225); }
            }
            if (s1 !== peg$FAILED) {
              s2 = [];
              if (peg$c231.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c232); }
              }
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  if (peg$c231.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c232); }
                  }
                }
              } else {
                s2 = peg$c0;
              }
              if (s2 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c233(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 48) {
                s1 = peg$c224;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c225); }
              }
              if (s1 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c234();
              }
              s0 = s1;
            }
          }
        }
  
        return s0;
      }
  
      function peg$parsefloat_constant() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        if (peg$c221.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c222); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c221.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c222); }
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c235;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c236); }
          }
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c221.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c222); }
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c221.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c222); }
                }
              }
            } else {
              s4 = peg$c0;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsefloat_exponent();
              if (s5 === peg$FAILED) {
                s5 = peg$c24;
              }
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$c0;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = [];
          if (peg$c221.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c222); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c221.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c222); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c235;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c236); }
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$c221.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c222); }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c221.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c222); }
                }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsefloat_exponent();
                if (s5 === peg$FAILED) {
                  s5 = peg$c24;
                }
                if (s5 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$c0;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$c0;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c237(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$currPos;
          s2 = [];
          if (peg$c221.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c222); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c221.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c222); }
              }
            }
          } else {
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefloat_exponent();
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$c0;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$c0;
          }
          if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c238(s1);
          }
          s0 = s1;
        }
  
        return s0;
      }
  
      function peg$parsefloat_exponent() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        if (peg$c239.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c240); }
        }
        if (s1 !== peg$FAILED) {
          if (peg$c241.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c242); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$c221.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c222); }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$c221.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c222); }
                }
              }
            } else {
              s3 = peg$c0;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c243(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseparen_expression() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseleft_paren();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseassignment_expression();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseright_paren();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c244(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebool_constant() {
        var s0, s1;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c199) {
          s1 = peg$c199;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c200); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c201) {
            s1 = peg$c201;
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c202); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c245(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parseprimary_expression() {
        var s0;
  
        s0 = peg$parsefunction_call();
        if (s0 === peg$FAILED) {
          s0 = peg$parseidentifier();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefloat_constant();
            if (s0 === peg$FAILED) {
              s0 = peg$parseint_constant();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebool_constant();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseparen_expression();
                }
              }
            }
          }
        }
  
        return s0;
      }
  
      function peg$parseindex_accessor() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseleft_bracket();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseassignment_expression();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseright_bracket();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c246(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsefield_selector() {
        var s0, s1, s2;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c235;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c236); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseidentifier();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c247(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepostfix_expression() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        s1 = peg$parseprimary_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsefield_selector();
          if (s3 === peg$FAILED) {
            s3 = peg$parseindex_accessor();
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsefield_selector();
            if (s3 === peg$FAILED) {
              s3 = peg$parseindex_accessor();
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c248(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsepostfix_expression_no_repeat() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parsepostfix_expression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c249) {
              s3 = peg$c249;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c250); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c251) {
                s3 = peg$c251;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c252); }
              }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsefield_selector();
              if (s5 === peg$FAILED) {
                s5 = peg$parseindex_accessor();
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsefield_selector();
                if (s5 === peg$FAILED) {
                  s5 = peg$parseindex_accessor();
                }
              }
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c253(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseparameter_list() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c138) {
          s1 = peg$c138;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c139); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c254();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseassignment_expression();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parsecomma();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseassignment_expression();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$currPos;
              s4 = peg$parsecomma();
              if (s4 !== peg$FAILED) {
                s5 = peg$parseassignment_expression();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c255(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
  
        return s0;
      }
  
      function peg$parsefunction_call() {
        var s0, s1, s2, s3, s4;
  
        s0 = peg$currPos;
        s1 = peg$parsefunction_identifier();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseleft_paren();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseparameter_list();
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parseright_paren();
              if (s4 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c256(s1, s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsefunction_identifier() {
        var s0, s1;
  
        s0 = peg$currPos;
        s1 = peg$parseidentifier();
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c257(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$parsetype_name();
        }
  
        return s0;
      }
  
      function peg$parseunary_expression() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c249) {
          s1 = peg$c249;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c250); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c251) {
            s1 = peg$c251;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c252); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 33) {
              s1 = peg$c258;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c259); }
            }
            if (s1 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 126) {
                s1 = peg$c260;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c261); }
              }
              if (s1 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                  s1 = peg$c262;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c263); }
                }
                if (s1 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s1 = peg$c264;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c265); }
                  }
                }
              }
            }
          }
        }
        if (s1 === peg$FAILED) {
          s1 = peg$c24;
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsepostfix_expression_no_repeat();
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c266(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemultiplicative_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c267;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c268); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s1 = peg$c269;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c270); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s1 = peg$c271;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c272); }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c273(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsemultiplicative_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parseunary_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsemultiplicative_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseunary_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsemultiplicative_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseunary_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseadditive_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 43) {
          s1 = peg$c262;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c263); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 43) {
            s3 = peg$c262;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c263); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c33;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c275();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c264;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c265); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c264;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c265); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c33;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c2;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c276();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
  
        return s0;
      }
  
      function peg$parseadditive_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parsemultiplicative_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseadditive_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsemultiplicative_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseadditive_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsemultiplicative_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseshift_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c277) {
          s1 = peg$c277;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c278); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c279) {
            s1 = peg$c279;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c280); }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c273(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseshift_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parseadditive_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseshift_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseadditive_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseshift_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseadditive_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parserelational_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
          s1 = peg$c281;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c282); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 60) {
            s3 = peg$c281;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c282); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c33;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s3 === peg$FAILED) {
              s3 = peg$c24;
            }
            if (s3 !== peg$FAILED) {
              peg$reportedPos = s0;
              s1 = peg$c283(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 62) {
            s1 = peg$c284;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c285); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 62) {
              s3 = peg$c284;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c285); }
            }
            peg$silentFails--;
            if (s3 === peg$FAILED) {
              s2 = peg$c2;
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s3 = peg$c33;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c34); }
              }
              if (s3 === peg$FAILED) {
                s3 = peg$c24;
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c286(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        }
  
        return s0;
      }
  
      function peg$parserelational_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parseshift_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parserelational_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseshift_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parserelational_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseshift_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseequality_operator() {
        var s0, s1;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c287) {
          s1 = peg$c287;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c288); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c289) {
            s1 = peg$c289;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c290); }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c291(s1);
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parseequality_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parserelational_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseequality_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parserelational_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseequality_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parserelational_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebitwise_and_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 38) {
          s1 = peg$c292;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c293); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 38) {
              s3 = peg$c292;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c293); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c294();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebitwise_and_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parseequality_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebitwise_and_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseequality_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebitwise_and_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseequality_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebitwise_xor_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 94) {
          s1 = peg$c295;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c296); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 94) {
              s3 = peg$c295;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c296); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c297();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebitwise_xor_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parsebitwise_and_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebitwise_xor_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebitwise_and_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebitwise_xor_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsebitwise_and_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebitwise_or_operator() {
        var s0, s1, s2, s3;
  
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 124) {
          s1 = peg$c298;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c299); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c33;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 124) {
              s3 = peg$c298;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c299); }
            }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = peg$c2;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c300();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parsebitwise_or_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parsebitwise_xor_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsebitwise_or_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebitwise_xor_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebitwise_or_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsebitwise_xor_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parselogical_and_operator() {
        var s0, s1;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c301) {
          s1 = peg$c301;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c302); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c303();
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parselogical_and_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parsebitwise_or_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselogical_and_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsebitwise_or_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parselogical_and_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsebitwise_or_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parselogical_xor_operator() {
        var s0, s1;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c304) {
          s1 = peg$c304;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c305); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c306();
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parselogical_xor_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parselogical_and_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselogical_xor_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogical_and_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parselogical_xor_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselogical_and_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parselogical_or_operator() {
        var s0, s1;
  
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c307) {
          s1 = peg$c307;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c308); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c309();
        }
        s0 = s1;
  
        return s0;
      }
  
      function peg$parselogical_or_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parselogical_xor_expression();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            s4 = peg$c24;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parselogical_or_operator();
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 === peg$FAILED) {
                s6 = peg$c24;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parselogical_xor_expression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parse_();
            if (s4 === peg$FAILED) {
              s4 = peg$c24;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parselogical_or_operator();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 === peg$FAILED) {
                  s6 = peg$c24;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parselogical_xor_expression();
                  if (s7 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$c0;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$c0;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$c0;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c274(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseconditional_expression() {
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
  
        s0 = peg$currPos;
        s1 = peg$parselogical_or_expression();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parse_();
          if (s3 === peg$FAILED) {
            s3 = peg$c24;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 63) {
              s4 = peg$c310;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c311); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 === peg$FAILED) {
                s5 = peg$c24;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseassignment_expression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 === peg$FAILED) {
                    s7 = peg$c24;
                  }
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s8 = peg$c312;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c313); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (s9 === peg$FAILED) {
                        s9 = peg$c24;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parseassignment_expression();
                        if (s10 !== peg$FAILED) {
                          s3 = [s3, s4, s5, s6, s7, s8, s9, s10];
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$c0;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$c0;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$c0;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$c0;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$c0;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$c0;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$c0;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c314(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
  
        return s0;
      }
  
      function peg$parseassignment_expression() {
        var s0, s1, s2, s3, s4, s5;
  
        s0 = peg$currPos;
        s1 = peg$parseconditional_expression();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 === peg$FAILED) {
            s2 = peg$c24;
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s3 = peg$c33;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c34); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c315) {
                s3 = peg$c315;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c316); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c317) {
                  s3 = peg$c317;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c318); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c319) {
                    s3 = peg$c319;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c320); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c321) {
                      s3 = peg$c321;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c322); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c323) {
                        s3 = peg$c323;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c324); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c325) {
                          s3 = peg$c325;
                          peg$currPos += 3;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c326); }
                        }
                        if (s3 === peg$FAILED) {
                          if (input.substr(peg$currPos, 3) === peg$c327) {
                            s3 = peg$c327;
                            peg$currPos += 3;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c328); }
                          }
                          if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c329) {
                              s3 = peg$c329;
                              peg$currPos += 2;
                            } else {
                              s3 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c330); }
                            }
                            if (s3 === peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c331) {
                                s3 = peg$c331;
                                peg$currPos += 2;
                              } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c332); }
                              }
                              if (s3 === peg$FAILED) {
                                if (input.substr(peg$currPos, 2) === peg$c333) {
                                  s3 = peg$c333;
                                  peg$currPos += 2;
                                } else {
                                  s3 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c334); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 === peg$FAILED) {
                s4 = peg$c24;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseassignment_expression();
                if (s5 !== peg$FAILED) {
                  peg$reportedPos = s0;
                  s1 = peg$c335(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseconditional_expression();
        }
  
        return s0;
      }
  
      function peg$parsecondition() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
  
        s0 = peg$currPos;
        s1 = peg$parselocally_specified_type();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseidentifier();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 === peg$FAILED) {
                s4 = peg$c24;
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s5 = peg$c33;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 === peg$FAILED) {
                    s6 = peg$c24;
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parseassignment_expression();
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseassignment_expression();
        }
  
        return s0;
      }
  
  
        // Map containing the names of structs defined in the shader mapped to "true".
        var typeNames = { };
  
        // Identifer for each node.
        var next_id = 0;
  
        // The type of shader being parsed.  This sould be set before parsing begins.
        // This allows us to reject invalid constructs such as attribute declaration
        // in a fragment shader or discard ina vertex shader.
        var shaderType = "vs";
  
        function pos() {
            return {
            line: line(),
            column: column(),
            offset: offset(),
            span: text().length
          };
        }
  
        var ASTNode = require("./ast");
  
        /** @constructor */
        function node(extraProperties, position) {
          return new ASTNode(extraProperties.type, pos(), extraProperties);
        };
  
        // Helper function to daisy chain together a series of binary operations.
        function daisy_chain(head, tail) {
          var result = head;
          for (var i = 0; i < tail.length; i++) {
            result = new node({
              type: "binary",
              operator: tail[i][1],
              left: result,
              right: tail[i][3]
            });
          }
          return result;
        };
  
        // Generates AST Nodes for a preprocessor branch.
        function preprocessor_branch(if_directive,
                                     elif_directives,
                                     else_directive) {
          var elseList = elif_directives;
          if (else_directive) {
            elseList = elseList.concat([else_directive]);
          }
          var result = if_directive[0];
          result.guarded_statements = if_directive[1].statements;
          var current_branch = result;
          for (var i = 0; i < elseList.length; i++) {
            current_branch.elseBody = elseList[i][0];
            current_branch.elseBody.guarded_statements =
              elseList[i][1].statements;
            current_branch = current_branch.elseBody;
          }
          return result;
        };
  
  
      peg$result = peg$startRuleFunction();
  
      if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
      } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
          peg$fail({ type: "end", description: "end of input" });
        }
  
        throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
      }
    }
  
    return {
      SyntaxError: SyntaxError,
      parse:       parse
    };
  })();
  